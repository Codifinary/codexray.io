name: CI/CD Pipeline for Codexray

# -------------------------------------
# Triggers: Run on push to main branch
# -------------------------------------
on:
  push:
    branches:
      - main

# -------------------------------------
# Define Environment Variables
# -------------------------------------
env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/codexray:latest
  GKE_CLUSTER: codexray-cluster
  GKE_REGION: asia-south1
  GKE_NAMESPACE: codexray

permissions:
  id-token: write   # Required for Workload Identity Federation
  contents: read    # Required for accessing repository contents

# -------------------------------------
# Job 1: CI - Build, Test, Lint
# -------------------------------------
jobs:
  ci:
    name: CI - Build, Test, Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

#      - name: Run Tests
#        run: |
#          go test ./...

#      - name: Run Linter
#        run: |
#          go fmt ./...
#          go vet ./...

# -------------------------------------
# Job 2: Build and Push Docker Image
# -------------------------------------
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: ci  # Runs after CI passes

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # - name: Login to Docker Hub
      #   run: |
      #     echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # - name: Build Docker Image
      #   run: |
      #     docker build -t $DOCKER_IMAGE -f Dockerfile .

      # - name: Push Docker Image to Docker Hub
      #   run: |
      #     docker push $DOCKER_IMAGE

# -------------------------------------
# Job 3: Deploy to GKE
# -------------------------------------
  deploy-to-gke:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Authenticate to Google Cloud using Workload Identity Federation
      - name: Authenticate with Workload Identity Federation
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      # Install gke-gcloud-auth-plugin
      - name: Install gke-gcloud-auth-plugin
        run: |
          sudo apt-get update
          sudo apt-get install -y google-cloud-cli-gke-gcloud-auth-plugin || \
          gcloud components install gke-gcloud-auth-plugin || \
          curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-443.0.0-linux-x86_64.tar.gz && \
          tar -xvf google-cloud-cli-443.0.0-linux-x86_64.tar.gz && \
          sudo mv google-cloud-sdk/bin/gke-gcloud-auth-plugin /usr/local/bin/ && \
          sudo chmod +x /usr/local/bin/gke-gcloud-auth-plugin
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV
      # Set up gcloud CLI
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'

      # Configure kubectl
      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --region $GKE_REGION --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Debug Kubernetes Connection
        run: |
          echo "---- Kubernetes Cluster Info ----"
          kubectl cluster-info
          echo "---- Kubernetes Nodes ----"
          kubectl get nodes

      - name: Replace Variables in Kubernetes YAML
        run: |
          sed -i 's|\$DOCKERHUB_USERNAME|${{ secrets.DOCKERHUB_USERNAME }}|g' codexray.yaml
          cat codexray.yaml    

      - name: Apply Kubernetes Manifest
        run: |
          kubectl apply -f codexray.yaml

      - name: Verify Deployment
        run: |
          kubectl get pods -n $GKE_NAMESPACE
          kubectl get svc -n $GKE_NAMESPACE
