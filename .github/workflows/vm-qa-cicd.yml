name: CI/CD Pipeline for Codexray-QA (VM Deployment using GHCR)

# -------------------------------------
# Triggers: Run on push to main branch
# -------------------------------------
on:
  push:
    branches:
      - qa

# -------------------------------------
# Define Environment Variables
# -------------------------------------
env:
  GHCR_IMAGE: ghcr.io/codifinary/codexray-qa:latest
  VM_INSTANCE: ${{ secrets.VM_INSTANCE_IP }}
  VM_USER: 'codexray'
  VM_SSH_KEY: ${{ secrets.VM_SSH_PRIVATE_KEY }}

permissions:
  packages: write  # Required for pushing to GHCR
  contents: read   # Required for accessing repository contents

# -------------------------------------
# Job 1: CI - Build, Test, Lint
# -------------------------------------
jobs:
  ci:
    name: CI - Build, Test, Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

# -------------------------------------
# Job 2: Build and Push Docker Image to GHCR
# -------------------------------------
  build-and-push:
    name: Build and Push Docker Image to GHCR
    runs-on: ubuntu-latest
    needs: ci # Ensures this runs only after CI succeeds

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Frontend Dependencies
        run: |
          cd front
          npm ci

      - name: Build Frontend
        run: |
          cd front
          npm run build-prod

      # Authenticate with GitHub Container Registry
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t $GHCR_IMAGE -f Dockerfile .

      # Push Docker Image to GHCR
      - name: Push Docker Image to GHCR
        run: |
          docker push $GHCR_IMAGE

# -------------------------------------
# Job 3: Deploy to VM with Docker Compose
# -------------------------------------
  deploy-to-vm:
    name: Deploy to VM
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up SSH Key
        run: |
          echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Copy Docker Compose Files to VM
        run: |
          scp -o StrictHostKeyChecking=no -i private_key.pem -P 7000 deploy/docker-compose-qa.yaml $VM_USER@$VM_INSTANCE:/home/$VM_USER/docker-compose.yaml

      - name: Pull Latest Image and Restart Containers
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem -p 7000 $VM_USER@$VM_INSTANCE << 'EOF'
            docker login ghcr.io -u ${{ github.actor }} --password ${{ secrets.GHCR_PAT }}
            docker-compose -f /home/${{ env.VM_USER }}/docker-compose.yaml down
            docker-compose -f /home/${{ env.VM_USER }}/docker-compose.yaml up -d
          EOF

      - name: Verify Running Containers
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem -p 7000 $VM_USER@$VM_INSTANCE << 'EOF'
            docker ps
          EOF