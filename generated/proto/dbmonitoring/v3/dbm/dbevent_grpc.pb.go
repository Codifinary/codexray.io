// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: dbm/dbevent.proto

package dbm

import (
	common "codexray/generated/proto/dbmonitoring/v3/common"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DbmEventService_CollectEvent_FullMethodName = "/dbm.skywalking.v3.DbmEventService/collectEvent"
)

// DbmEventServiceClient is the client API for DbmEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DbmEventServiceClient interface {
	CollectEvent(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[DbmEventDetails, common.Commands], error)
}

type dbmEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDbmEventServiceClient(cc grpc.ClientConnInterface) DbmEventServiceClient {
	return &dbmEventServiceClient{cc}
}

func (c *dbmEventServiceClient) CollectEvent(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[DbmEventDetails, common.Commands], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DbmEventService_ServiceDesc.Streams[0], DbmEventService_CollectEvent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DbmEventDetails, common.Commands]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DbmEventService_CollectEventClient = grpc.ClientStreamingClient[DbmEventDetails, common.Commands]

// DbmEventServiceServer is the server API for DbmEventService service.
// All implementations must embed UnimplementedDbmEventServiceServer
// for forward compatibility.
type DbmEventServiceServer interface {
	CollectEvent(grpc.ClientStreamingServer[DbmEventDetails, common.Commands]) error
	mustEmbedUnimplementedDbmEventServiceServer()
}

// UnimplementedDbmEventServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDbmEventServiceServer struct{}

func (UnimplementedDbmEventServiceServer) CollectEvent(grpc.ClientStreamingServer[DbmEventDetails, common.Commands]) error {
	return status.Errorf(codes.Unimplemented, "method CollectEvent not implemented")
}
func (UnimplementedDbmEventServiceServer) mustEmbedUnimplementedDbmEventServiceServer() {}
func (UnimplementedDbmEventServiceServer) testEmbeddedByValue()                         {}

// UnsafeDbmEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DbmEventServiceServer will
// result in compilation errors.
type UnsafeDbmEventServiceServer interface {
	mustEmbedUnimplementedDbmEventServiceServer()
}

func RegisterDbmEventServiceServer(s grpc.ServiceRegistrar, srv DbmEventServiceServer) {
	// If the following call pancis, it indicates UnimplementedDbmEventServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DbmEventService_ServiceDesc, srv)
}

func _DbmEventService_CollectEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DbmEventServiceServer).CollectEvent(&grpc.GenericServerStream[DbmEventDetails, common.Commands]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DbmEventService_CollectEventServer = grpc.ClientStreamingServer[DbmEventDetails, common.Commands]

// DbmEventService_ServiceDesc is the grpc.ServiceDesc for DbmEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DbmEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dbm.skywalking.v3.DbmEventService",
	HandlerType: (*DbmEventServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "collectEvent",
			Handler:       _DbmEventService_CollectEvent_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "dbm/dbevent.proto",
}
