// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: dbm/query.proto

package dbm

import (
	common "codexray/generated/proto/dbmonitoring/v3/common"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DbmQueryService_CollectQuery_FullMethodName = "/dbm.skywalking.v3.DbmQueryService/collectQuery"
)

// DbmQueryServiceClient is the client API for DbmQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DbmQueryServiceClient interface {
	CollectQuery(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[QueryDetails, common.Commands], error)
}

type dbmQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDbmQueryServiceClient(cc grpc.ClientConnInterface) DbmQueryServiceClient {
	return &dbmQueryServiceClient{cc}
}

func (c *dbmQueryServiceClient) CollectQuery(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[QueryDetails, common.Commands], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DbmQueryService_ServiceDesc.Streams[0], DbmQueryService_CollectQuery_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueryDetails, common.Commands]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DbmQueryService_CollectQueryClient = grpc.ClientStreamingClient[QueryDetails, common.Commands]

// DbmQueryServiceServer is the server API for DbmQueryService service.
// All implementations must embed UnimplementedDbmQueryServiceServer
// for forward compatibility.
type DbmQueryServiceServer interface {
	CollectQuery(grpc.ClientStreamingServer[QueryDetails, common.Commands]) error
	mustEmbedUnimplementedDbmQueryServiceServer()
}

// UnimplementedDbmQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDbmQueryServiceServer struct{}

func (UnimplementedDbmQueryServiceServer) CollectQuery(grpc.ClientStreamingServer[QueryDetails, common.Commands]) error {
	return status.Errorf(codes.Unimplemented, "method CollectQuery not implemented")
}
func (UnimplementedDbmQueryServiceServer) mustEmbedUnimplementedDbmQueryServiceServer() {}
func (UnimplementedDbmQueryServiceServer) testEmbeddedByValue()                         {}

// UnsafeDbmQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DbmQueryServiceServer will
// result in compilation errors.
type UnsafeDbmQueryServiceServer interface {
	mustEmbedUnimplementedDbmQueryServiceServer()
}

func RegisterDbmQueryServiceServer(s grpc.ServiceRegistrar, srv DbmQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedDbmQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DbmQueryService_ServiceDesc, srv)
}

func _DbmQueryService_CollectQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DbmQueryServiceServer).CollectQuery(&grpc.GenericServerStream[QueryDetails, common.Commands]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DbmQueryService_CollectQueryServer = grpc.ClientStreamingServer[QueryDetails, common.Commands]

// DbmQueryService_ServiceDesc is the grpc.ServiceDesc for DbmQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DbmQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dbm.skywalking.v3.DbmQueryService",
	HandlerType: (*DbmQueryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "collectQuery",
			Handler:       _DbmQueryService_CollectQuery_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "dbm/query.proto",
}
