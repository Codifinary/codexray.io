//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: language-agent/Meter.proto

package language_agent

import (
	common "codexray/generated/proto/dbmonitoring/v3/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Label of the meter
type Label struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Label) Reset() {
	*x = Label{}
	mi := &file_language_agent_Meter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_language_agent_Meter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_language_agent_Meter_proto_rawDescGZIP(), []int{0}
}

func (x *Label) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Label) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// The histogram element definition. It includes the bucket lower boundary and the count in the bucket.
type MeterBucketValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The value represents the min value of the bucket,
	// the  upper boundary is determined by next MeterBucketValue$bucket,
	// if it doesn't exist, the upper boundary is positive infinity.
	Bucket float64 `protobuf:"fixed64,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Count  int64   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// If is negative infinity, the value of the bucket is invalid
	IsNegativeInfinity bool `protobuf:"varint,3,opt,name=isNegativeInfinity,proto3" json:"isNegativeInfinity,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MeterBucketValue) Reset() {
	*x = MeterBucketValue{}
	mi := &file_language_agent_Meter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeterBucketValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeterBucketValue) ProtoMessage() {}

func (x *MeterBucketValue) ProtoReflect() protoreflect.Message {
	mi := &file_language_agent_Meter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeterBucketValue.ProtoReflect.Descriptor instead.
func (*MeterBucketValue) Descriptor() ([]byte, []int) {
	return file_language_agent_Meter_proto_rawDescGZIP(), []int{1}
}

func (x *MeterBucketValue) GetBucket() float64 {
	if x != nil {
		return x.Bucket
	}
	return 0
}

func (x *MeterBucketValue) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MeterBucketValue) GetIsNegativeInfinity() bool {
	if x != nil {
		return x.IsNegativeInfinity
	}
	return false
}

// Meter single value
type MeterSingleValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Meter name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Labels
	Labels []*Label `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	// Single value
	Value         float64 `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeterSingleValue) Reset() {
	*x = MeterSingleValue{}
	mi := &file_language_agent_Meter_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeterSingleValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeterSingleValue) ProtoMessage() {}

func (x *MeterSingleValue) ProtoReflect() protoreflect.Message {
	mi := &file_language_agent_Meter_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeterSingleValue.ProtoReflect.Descriptor instead.
func (*MeterSingleValue) Descriptor() ([]byte, []int) {
	return file_language_agent_Meter_proto_rawDescGZIP(), []int{2}
}

func (x *MeterSingleValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MeterSingleValue) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MeterSingleValue) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Histogram
type MeterHistogram struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Meter name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Labels
	Labels []*Label `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	// Customize the buckets
	Values        []*MeterBucketValue `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeterHistogram) Reset() {
	*x = MeterHistogram{}
	mi := &file_language_agent_Meter_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeterHistogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeterHistogram) ProtoMessage() {}

func (x *MeterHistogram) ProtoReflect() protoreflect.Message {
	mi := &file_language_agent_Meter_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeterHistogram.ProtoReflect.Descriptor instead.
func (*MeterHistogram) Descriptor() ([]byte, []int) {
	return file_language_agent_Meter_proto_rawDescGZIP(), []int{3}
}

func (x *MeterHistogram) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MeterHistogram) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MeterHistogram) GetValues() []*MeterBucketValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// Single meter data, if the same metrics have a different label, they will separate.
type MeterData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Meter data could be a single value or histogram.
	//
	// Types that are valid to be assigned to Metric:
	//
	//	*MeterData_SingleValue
	//	*MeterData_Histogram
	Metric isMeterData_Metric `protobuf_oneof:"metric"`
	// Service name, be set value in the first element in the stream-call.
	Service string `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	// Service instance name, be set value in the first element in the stream-call.
	ServiceInstance string `protobuf:"bytes,4,opt,name=serviceInstance,proto3" json:"serviceInstance,omitempty"`
	// Meter data report time, be set value in the first element in the stream-call.
	Timestamp     int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeterData) Reset() {
	*x = MeterData{}
	mi := &file_language_agent_Meter_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeterData) ProtoMessage() {}

func (x *MeterData) ProtoReflect() protoreflect.Message {
	mi := &file_language_agent_Meter_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeterData.ProtoReflect.Descriptor instead.
func (*MeterData) Descriptor() ([]byte, []int) {
	return file_language_agent_Meter_proto_rawDescGZIP(), []int{4}
}

func (x *MeterData) GetMetric() isMeterData_Metric {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *MeterData) GetSingleValue() *MeterSingleValue {
	if x != nil {
		if x, ok := x.Metric.(*MeterData_SingleValue); ok {
			return x.SingleValue
		}
	}
	return nil
}

func (x *MeterData) GetHistogram() *MeterHistogram {
	if x != nil {
		if x, ok := x.Metric.(*MeterData_Histogram); ok {
			return x.Histogram
		}
	}
	return nil
}

func (x *MeterData) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *MeterData) GetServiceInstance() string {
	if x != nil {
		return x.ServiceInstance
	}
	return ""
}

func (x *MeterData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type isMeterData_Metric interface {
	isMeterData_Metric()
}

type MeterData_SingleValue struct {
	SingleValue *MeterSingleValue `protobuf:"bytes,1,opt,name=singleValue,proto3,oneof"`
}

type MeterData_Histogram struct {
	Histogram *MeterHistogram `protobuf:"bytes,2,opt,name=histogram,proto3,oneof"`
}

func (*MeterData_SingleValue) isMeterData_Metric() {}

func (*MeterData_Histogram) isMeterData_Metric() {}

type MeterDataCollection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MeterData     []*MeterData           `protobuf:"bytes,1,rep,name=meterData,proto3" json:"meterData,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeterDataCollection) Reset() {
	*x = MeterDataCollection{}
	mi := &file_language_agent_Meter_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeterDataCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeterDataCollection) ProtoMessage() {}

func (x *MeterDataCollection) ProtoReflect() protoreflect.Message {
	mi := &file_language_agent_Meter_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeterDataCollection.ProtoReflect.Descriptor instead.
func (*MeterDataCollection) Descriptor() ([]byte, []int) {
	return file_language_agent_Meter_proto_rawDescGZIP(), []int{5}
}

func (x *MeterDataCollection) GetMeterData() []*MeterData {
	if x != nil {
		return x.MeterData
	}
	return nil
}

var File_language_agent_Meter_proto protoreflect.FileDescriptor

const file_language_agent_Meter_proto_rawDesc = "" +
	"\n" +
	"\x1alanguage-agent/Meter.proto\x12\x03dbm\x1a\x13common/Common.proto\"1\n" +
	"\x05Label\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"p\n" +
	"\x10MeterBucketValue\x12\x16\n" +
	"\x06bucket\x18\x01 \x01(\x01R\x06bucket\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x03R\x05count\x12.\n" +
	"\x12isNegativeInfinity\x18\x03 \x01(\bR\x12isNegativeInfinity\"`\n" +
	"\x10MeterSingleValue\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\"\n" +
	"\x06labels\x18\x02 \x03(\v2\n" +
	".dbm.LabelR\x06labels\x12\x14\n" +
	"\x05value\x18\x03 \x01(\x01R\x05value\"w\n" +
	"\x0eMeterHistogram\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\"\n" +
	"\x06labels\x18\x02 \x03(\v2\n" +
	".dbm.LabelR\x06labels\x12-\n" +
	"\x06values\x18\x03 \x03(\v2\x15.dbm.MeterBucketValueR\x06values\"\xe7\x01\n" +
	"\tMeterData\x129\n" +
	"\vsingleValue\x18\x01 \x01(\v2\x15.dbm.MeterSingleValueH\x00R\vsingleValue\x123\n" +
	"\thistogram\x18\x02 \x01(\v2\x13.dbm.MeterHistogramH\x00R\thistogram\x12\x18\n" +
	"\aservice\x18\x03 \x01(\tR\aservice\x12(\n" +
	"\x0fserviceInstance\x18\x04 \x01(\tR\x0fserviceInstance\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\x03R\ttimestampB\b\n" +
	"\x06metric\"C\n" +
	"\x13MeterDataCollection\x12,\n" +
	"\tmeterData\x18\x01 \x03(\v2\x0e.dbm.MeterDataR\tmeterData2w\n" +
	"\x12MeterReportService\x12(\n" +
	"\acollect\x12\x0e.dbm.MeterData\x1a\t.Commands\"\x00(\x01\x127\n" +
	"\fcollectBatch\x12\x18.dbm.MeterDataCollection\x1a\t.Commands\"\x00(\x01B\x90\x01\n" +
	"3org.apache.skywalking.apm.network.language.agent.v3P\x01Z7codexray/generated/proto/dbmonitoring/v3/language-agent\xaa\x02\x1dSkyWalking.NetworkProtocol.V3b\x06proto3"

var (
	file_language_agent_Meter_proto_rawDescOnce sync.Once
	file_language_agent_Meter_proto_rawDescData []byte
)

func file_language_agent_Meter_proto_rawDescGZIP() []byte {
	file_language_agent_Meter_proto_rawDescOnce.Do(func() {
		file_language_agent_Meter_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_language_agent_Meter_proto_rawDesc), len(file_language_agent_Meter_proto_rawDesc)))
	})
	return file_language_agent_Meter_proto_rawDescData
}

var file_language_agent_Meter_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_language_agent_Meter_proto_goTypes = []any{
	(*Label)(nil),               // 0: dbm.Label
	(*MeterBucketValue)(nil),    // 1: dbm.MeterBucketValue
	(*MeterSingleValue)(nil),    // 2: dbm.MeterSingleValue
	(*MeterHistogram)(nil),      // 3: dbm.MeterHistogram
	(*MeterData)(nil),           // 4: dbm.MeterData
	(*MeterDataCollection)(nil), // 5: dbm.MeterDataCollection
	(*common.Commands)(nil),     // 6: Commands
}
var file_language_agent_Meter_proto_depIdxs = []int32{
	0, // 0: dbm.MeterSingleValue.labels:type_name -> dbm.Label
	0, // 1: dbm.MeterHistogram.labels:type_name -> dbm.Label
	1, // 2: dbm.MeterHistogram.values:type_name -> dbm.MeterBucketValue
	2, // 3: dbm.MeterData.singleValue:type_name -> dbm.MeterSingleValue
	3, // 4: dbm.MeterData.histogram:type_name -> dbm.MeterHistogram
	4, // 5: dbm.MeterDataCollection.meterData:type_name -> dbm.MeterData
	4, // 6: dbm.MeterReportService.collect:input_type -> dbm.MeterData
	5, // 7: dbm.MeterReportService.collectBatch:input_type -> dbm.MeterDataCollection
	6, // 8: dbm.MeterReportService.collect:output_type -> Commands
	6, // 9: dbm.MeterReportService.collectBatch:output_type -> Commands
	8, // [8:10] is the sub-list for method output_type
	6, // [6:8] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_language_agent_Meter_proto_init() }
func file_language_agent_Meter_proto_init() {
	if File_language_agent_Meter_proto != nil {
		return
	}
	file_language_agent_Meter_proto_msgTypes[4].OneofWrappers = []any{
		(*MeterData_SingleValue)(nil),
		(*MeterData_Histogram)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_language_agent_Meter_proto_rawDesc), len(file_language_agent_Meter_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_language_agent_Meter_proto_goTypes,
		DependencyIndexes: file_language_agent_Meter_proto_depIdxs,
		MessageInfos:      file_language_agent_Meter_proto_msgTypes,
	}.Build()
	File_language_agent_Meter_proto = out.File
	file_language_agent_Meter_proto_goTypes = nil
	file_language_agent_Meter_proto_depIdxs = nil
}
