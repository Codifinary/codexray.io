//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: language-agent/Meter.proto

package language_agent

import (
	common "codexray/generated/proto/dbmonitoring/v3/common"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MeterReportService_Collect_FullMethodName      = "/dbm.MeterReportService/collect"
	MeterReportService_CollectBatch_FullMethodName = "/dbm.MeterReportService/collectBatch"
)

// MeterReportServiceClient is the client API for MeterReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeterReportServiceClient interface {
	// Meter data is reported in a certain period. The agent/SDK should report all collected metrics in this period through one stream.
	// The whole stream is an input data set, client should onComplete the stream per report period.
	Collect(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[MeterData, common.Commands], error)
	// Reporting meter data in bulk mode as MeterDataCollection.
	// By using this, each one in the stream would be treated as a complete input for MAL engine,
	// comparing to `collect (stream MeterData)`, which is using one stream as an input data set.
	CollectBatch(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[MeterDataCollection, common.Commands], error)
}

type meterReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeterReportServiceClient(cc grpc.ClientConnInterface) MeterReportServiceClient {
	return &meterReportServiceClient{cc}
}

func (c *meterReportServiceClient) Collect(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[MeterData, common.Commands], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MeterReportService_ServiceDesc.Streams[0], MeterReportService_Collect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MeterData, common.Commands]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MeterReportService_CollectClient = grpc.ClientStreamingClient[MeterData, common.Commands]

func (c *meterReportServiceClient) CollectBatch(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[MeterDataCollection, common.Commands], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MeterReportService_ServiceDesc.Streams[1], MeterReportService_CollectBatch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MeterDataCollection, common.Commands]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MeterReportService_CollectBatchClient = grpc.ClientStreamingClient[MeterDataCollection, common.Commands]

// MeterReportServiceServer is the server API for MeterReportService service.
// All implementations must embed UnimplementedMeterReportServiceServer
// for forward compatibility.
type MeterReportServiceServer interface {
	// Meter data is reported in a certain period. The agent/SDK should report all collected metrics in this period through one stream.
	// The whole stream is an input data set, client should onComplete the stream per report period.
	Collect(grpc.ClientStreamingServer[MeterData, common.Commands]) error
	// Reporting meter data in bulk mode as MeterDataCollection.
	// By using this, each one in the stream would be treated as a complete input for MAL engine,
	// comparing to `collect (stream MeterData)`, which is using one stream as an input data set.
	CollectBatch(grpc.ClientStreamingServer[MeterDataCollection, common.Commands]) error
	mustEmbedUnimplementedMeterReportServiceServer()
}

// UnimplementedMeterReportServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMeterReportServiceServer struct{}

func (UnimplementedMeterReportServiceServer) Collect(grpc.ClientStreamingServer[MeterData, common.Commands]) error {
	return status.Errorf(codes.Unimplemented, "method Collect not implemented")
}
func (UnimplementedMeterReportServiceServer) CollectBatch(grpc.ClientStreamingServer[MeterDataCollection, common.Commands]) error {
	return status.Errorf(codes.Unimplemented, "method CollectBatch not implemented")
}
func (UnimplementedMeterReportServiceServer) mustEmbedUnimplementedMeterReportServiceServer() {}
func (UnimplementedMeterReportServiceServer) testEmbeddedByValue()                            {}

// UnsafeMeterReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeterReportServiceServer will
// result in compilation errors.
type UnsafeMeterReportServiceServer interface {
	mustEmbedUnimplementedMeterReportServiceServer()
}

func RegisterMeterReportServiceServer(s grpc.ServiceRegistrar, srv MeterReportServiceServer) {
	// If the following call pancis, it indicates UnimplementedMeterReportServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MeterReportService_ServiceDesc, srv)
}

func _MeterReportService_Collect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MeterReportServiceServer).Collect(&grpc.GenericServerStream[MeterData, common.Commands]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MeterReportService_CollectServer = grpc.ClientStreamingServer[MeterData, common.Commands]

func _MeterReportService_CollectBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MeterReportServiceServer).CollectBatch(&grpc.GenericServerStream[MeterDataCollection, common.Commands]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MeterReportService_CollectBatchServer = grpc.ClientStreamingServer[MeterDataCollection, common.Commands]

// MeterReportService_ServiceDesc is the grpc.ServiceDesc for MeterReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeterReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dbm.MeterReportService",
	HandlerType: (*MeterReportServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "collect",
			Handler:       _MeterReportService_Collect_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "collectBatch",
			Handler:       _MeterReportService_CollectBatch_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "language-agent/Meter.proto",
}
